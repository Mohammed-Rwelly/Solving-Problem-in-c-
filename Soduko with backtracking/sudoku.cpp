#include <iostream>
#include <string>
#include <chrono>
#include <stdexcept>
#include <memory>
using namespace std;

namespace
{
  const size_t N = 9; // standard Sudoku board is of size 9 x 9 
}



class Sudoku
{
  public:
    Sudoku(string fromString)
    {
      // Assuming a string of 81 digits in rang[0, 9] where 0 is an empty cell, generated by reading the grid row-by-row,
      // this method should initialize the Sudoku board, otherwise a proper exception should be raised!
      // Please complete the code in here
    }
    void print()
    {
      // print the Sudoku board to the console in readable way!
      // Please complete the code in here
    }

    // The following method is a convenient way to access the cells of the Sudoku 9 x 9 grid
    int &operator()(size_t row, size_t col)
    {
      if(row >= 9 || col >=9)
      {
        throw out_of_range("Board subscript out of bounds");
      }
      return board[row][col];
    }

    private:
      int board[N][N];
};



// This is an abstract Sudoku solver class.
// Please don't touch this class!
class SudokuSolver
{
  public:

    // The purpose of the following methos is to solve the givin Sudoku and measure the time needed for that(in ms)
    double solveAndMeasureTime(Sudoku &sudoku)
    {
      auto start = chrono::steady_clock::now();
      solve(sudoku);
      auto end = chrono::steady_clock::now();
      return chrono::duration <double, milli> (end - start).count();
    }

  protected:
    virtual void solve(Sudoku &sudoku) = 0;
};



// Backtracking Sudoku solver class
// Feel free to modify the class as you wish as long as you make sure to override the solve method!
class BacktrackingSudokuSolver : public SudokuSolver
{
  protected:
    // Inherited via SudokuSolver
    virtual void solve(Sudoku &sudoku) override
    {
      // Please complete the code in here
    }  
};



// Dancing Links Sudoku solver class
// Feel free to modify the class as you wish as long as you make sure to override the solve method!
class DancingLinksSudokuSolver : public SudokuSolver
{
    protected:
    // Inherited via SudokuSolver
    virtual void solve(Sudoku &sudoku) override
    {
      // Please complete the code in here
    }  
};



// Solve a sudoku and log the solution along with time needed
// Please don't touch this method
void solveAndLog(Sudoku sudoku, SudokuSolver *solver)
{
  auto time = solver->solveAndMeasureTime(sudoku);
  sudoku.print();
  cout << "Solved in " << time << " ms" << endl;
}



int main()
{
  // A diver code
  try
  {
    auto sudokuString = "010008000304721690006000010000902530042103780035806000090000100021387409000500020";
    Sudoku sudoku(sudokuString);
    cout << "Unsolved Sudoku:" << endl;
    sudoku.print();
    auto backTrackingSolver = make_unique<BacktrackingSudokuSolver>();
    auto dancingLinksSolver = make_unique<DancingLinksSudokuSolver>();
    cout<< "Solving with Backtracking" << endl;
    solveAndLog(sudoku, backTrackingSolver.get());
    cout << "Solving with Dancing Links" << endl;
    solveAndLog(sudoku, dancingLinksSolver.get());
  }
  catch (std::exception& e)
  {
    cout << "An error occurred: " << e.what() << endl;
    return -2;
  }
  catch (...)
  {
    cout << "Unknown error!" << endl;
    return -1;
  }

  return 0;
}